using System;

namespace TS
{
    // Used data from `typescript.d.ts`
    // token > SyntaxKind.Identifier => token is a keyword
    // Also, If you add a new SyntaxKind be sure to keep the `Markers` section at the bottom in sync
    public enum SyntaxKind : int
    {
        Unknown = 0,
        EndOfFileToken = 1,
        SingleLineCommentTrivia = 2,
        MultiLineCommentTrivia = 3,
        NewLineTrivia = 4,
        WhitespaceTrivia = 5,
        ShebangTrivia = 6,
        ConflictMarkerTrivia = 7,
        NumericLiteral = 8,
        BigIntLiteral = 9,
        StringLiteral = 10,
        JsxText = 11,
        JsxTextAllWhiteSpaces = 12,
        RegularExpressionLiteral = 13,
        NoSubstitutionTemplateLiteral = 14,
        TemplateHead = 15,
        TemplateMiddle = 16,
        TemplateTail = 17,
        OpenBraceToken = 18,
        CloseBraceToken = 19,
        OpenParenToken = 20,
        CloseParenToken = 21,
        OpenBracketToken = 22,
        CloseBracketToken = 23,
        DotToken = 24,
        DotDotDotToken = 25,
        SemicolonToken = 26,
        CommaToken = 27,
        QuestionDotToken = 28,
        LessThanToken = 29,
        LessThanSlashToken = 30,
        GreaterThanToken = 31,
        LessThanEqualsToken = 32,
        GreaterThanEqualsToken = 33,
        EqualsEqualsToken = 34,
        ExclamationEqualsToken = 35,
        EqualsEqualsEqualsToken = 36,
        ExclamationEqualsEqualsToken = 37,
        EqualsGreaterThanToken = 38,
        PlusToken = 39,
        MinusToken = 40,
        AsteriskToken = 41,
        AsteriskAsteriskToken = 42,
        SlashToken = 43,
        PercentToken = 44,
        PlusPlusToken = 45,
        MinusMinusToken = 46,
        LessThanLessThanToken = 47,
        GreaterThanGreaterThanToken = 48,
        GreaterThanGreaterThanGreaterThanToken = 49,
        AmpersandToken = 50,
        BarToken = 51,
        CaretToken = 52,
        ExclamationToken = 53,
        TildeToken = 54,
        AmpersandAmpersandToken = 55,
        BarBarToken = 56,
        QuestionToken = 57,
        ColonToken = 58,
        AtToken = 59,
        QuestionQuestionToken = 60,
        /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */
        BacktickToken = 61,
        /** Only the JSDoc scanner produces HashToken. The normal scanner produces PrivateIdentifier. */
        HashToken = 62,
        EqualsToken = 63,
        PlusEqualsToken = 64,
        MinusEqualsToken = 65,
        AsteriskEqualsToken = 66,
        AsteriskAsteriskEqualsToken = 67,
        SlashEqualsToken = 68,
        PercentEqualsToken = 69,
        LessThanLessThanEqualsToken = 70,
        GreaterThanGreaterThanEqualsToken = 71,
        GreaterThanGreaterThanGreaterThanEqualsToken = 72,
        AmpersandEqualsToken = 73,
        BarEqualsToken = 74,
        BarBarEqualsToken = 75,
        AmpersandAmpersandEqualsToken = 76,
        QuestionQuestionEqualsToken = 77,
        CaretEqualsToken = 78,
        Identifier = 79,
        PrivateIdentifier = 80,
        BreakKeyword = 81,
        CaseKeyword = 82,
        CatchKeyword = 83,
        ClassKeyword = 84,
        ConstKeyword = 85,
        ContinueKeyword = 86,
        DebuggerKeyword = 87,
        DefaultKeyword = 88,
        DeleteKeyword = 89,
        DoKeyword = 90,
        ElseKeyword = 91,
        EnumKeyword = 92,
        ExportKeyword = 93,
        ExtendsKeyword = 94,
        FalseKeyword = 95,
        FinallyKeyword = 96,
        ForKeyword = 97,
        FunctionKeyword = 98,
        IfKeyword = 99,
        ImportKeyword = 100,
        InKeyword = 101,
        InstanceOfKeyword = 102,
        NewKeyword = 103,
        NullKeyword = 104,
        ReturnKeyword = 105,
        SuperKeyword = 106,
        SwitchKeyword = 107,
        ThisKeyword = 108,
        ThrowKeyword = 109,
        TrueKeyword = 110,
        TryKeyword = 111,
        TypeOfKeyword = 112,
        VarKeyword = 113,
        VoidKeyword = 114,
        WhileKeyword = 115,
        WithKeyword = 116,
        ImplementsKeyword = 117,
        InterfaceKeyword = 118,
        LetKeyword = 119,
        PackageKeyword = 120,
        PrivateKeyword = 121,
        ProtectedKeyword = 122,
        PublicKeyword = 123,
        StaticKeyword = 124,
        YieldKeyword = 125,
        AbstractKeyword = 126,
        AsKeyword = 127,
        AssertsKeyword = 128,
        AssertKeyword = 129,
        AnyKeyword = 130,
        AsyncKeyword = 131,
        AwaitKeyword = 132,
        BooleanKeyword = 133,
        ConstructorKeyword = 134,
        DeclareKeyword = 135,
        GetKeyword = 136,
        InferKeyword = 137,
        IntrinsicKeyword = 138,
        IsKeyword = 139,
        KeyOfKeyword = 140,
        ModuleKeyword = 141,
        NamespaceKeyword = 142,
        NeverKeyword = 143,
        OutKeyword = 144,
        ReadonlyKeyword = 145,
        RequireKeyword = 146,
        NumberKeyword = 147,
        ObjectKeyword = 148,
        SetKeyword = 149,
        StringKeyword = 150,
        SymbolKeyword = 151,
        TypeKeyword = 152,
        UndefinedKeyword = 153,
        UniqueKeyword = 154,
        UnknownKeyword = 155,
        FromKeyword = 156,
        GlobalKeyword = 157,
        BigIntKeyword = 158,
        OverrideKeyword = 159,
        OfKeyword = 160,
        QualifiedName = 161,
        ComputedPropertyName = 162,
        TypeParameter = 163,
        Parameter = 164,
        Decorator = 165,
        PropertySignature = 166,
        PropertyDeclaration = 167,
        MethodSignature = 168,
        MethodDeclaration = 169,
        ClassStaticBlockDeclaration = 170,
        Constructor = 171,
        GetAccessor = 172,
        SetAccessor = 173,
        CallSignature = 174,
        ConstructSignature = 175,
        IndexSignature = 176,
        TypePredicate = 177,
        TypeReference = 178,
        FunctionType = 179,
        ConstructorType = 180,
        TypeQuery = 181,
        TypeLiteral = 182,
        ArrayType = 183,
        TupleType = 184,
        OptionalType = 185,
        RestType = 186,
        UnionType = 187,
        IntersectionType = 188,
        ConditionalType = 189,
        InferType = 190,
        ParenthesizedType = 191,
        ThisType = 192,
        TypeOperator = 193,
        IndexedAccessType = 194,
        MappedType = 195,
        LiteralType = 196,
        NamedTupleMember = 197,
        TemplateLiteralType = 198,
        TemplateLiteralTypeSpan = 199,
        ImportType = 200,
        ObjectBindingPattern = 201,
        ArrayBindingPattern = 202,
        BindingElement = 203,
        ArrayLiteralExpression = 204,
        ObjectLiteralExpression = 205,
        PropertyAccessExpression = 206,
        ElementAccessExpression = 207,
        CallExpression = 208,
        NewExpression = 209,
        TaggedTemplateExpression = 210,
        TypeAssertionExpression = 211,
        ParenthesizedExpression = 212,
        FunctionExpression = 213,
        ArrowFunction = 214,
        DeleteExpression = 215,
        TypeOfExpression = 216,
        VoidExpression = 217,
        AwaitExpression = 218,
        PrefixUnaryExpression = 219,
        PostfixUnaryExpression = 220,
        BinaryExpression = 221,
        ConditionalExpression = 222,
        TemplateExpression = 223,
        YieldExpression = 224,
        SpreadElement = 225,
        ClassExpression = 226,
        OmittedExpression = 227,
        ExpressionWithTypeArguments = 228,
        AsExpression = 229,
        NonNullExpression = 230,
        MetaProperty = 231,
        SyntheticExpression = 232,
        TemplateSpan = 233,
        SemicolonClassElement = 234,
        Block = 235,
        EmptyStatement = 236,
        VariableStatement = 237,
        ExpressionStatement = 238,
        IfStatement = 239,
        DoStatement = 240,
        WhileStatement = 241,
        ForStatement = 242,
        ForInStatement = 243,
        ForOfStatement = 244,
        ContinueStatement = 245,
        BreakStatement = 246,
        ReturnStatement = 247,
        WithStatement = 248,
        SwitchStatement = 249,
        LabeledStatement = 250,
        ThrowStatement = 251,
        TryStatement = 252,
        DebuggerStatement = 253,
        VariableDeclaration = 254,
        VariableDeclarationList = 255,
        FunctionDeclaration = 256,
        ClassDeclaration = 257,
        InterfaceDeclaration = 258,
        TypeAliasDeclaration = 259,
        EnumDeclaration = 260,
        ModuleDeclaration = 261,
        ModuleBlock = 262,
        CaseBlock = 263,
        NamespaceExportDeclaration = 264,
        ImportEqualsDeclaration = 265,
        ImportDeclaration = 266,
        ImportClause = 267,
        NamespaceImport = 268,
        NamedImports = 269,
        ImportSpecifier = 270,
        ExportAssignment = 271,
        ExportDeclaration = 272,
        NamedExports = 273,
        NamespaceExport = 274,
        ExportSpecifier = 275,
        MissingDeclaration = 276,
        ExternalModuleReference = 277,


        JsxElement = 278,
        JsxSelfClosingElement = 279,
        JsxOpeningElement = 280,
        JsxClosingElement = 281,
        JsxFragment = 282,
        JsxOpeningFragment = 283,
        JsxClosingFragment = 284,
        JsxAttribute = 285,
        JsxAttributes = 286,
        JsxSpreadAttribute = 287,
        JsxExpression = 288,

        // Clauses
        CaseClause = 289,
        DefaultClause = 290,
        HeritageClause = 291,
        CatchClause = 292,
        AssertClause = 293,
        AssertEntry = 294,
        ImportTypeAssertionContainer = 295,

        // Property assignments
        PropertyAssignment = 296,
        ShorthandPropertyAssignment = 297,
        SpreadAssignment = 298,

        // Enum
        EnumMember = 299,

        // Unparsed
        UnparsedPrologue = 300,
        UnparsedPrepend = 301,
        UnparsedText = 302,
        UnparsedInternalText = 303,
        UnparsedSyntheticReference = 304,

        // Top-level nodes
        SourceFile = 305,
        Bundle = 306,
        UnparsedSource = 307,
        InputFiles = 308,

        // JSDoc nodes
        JSDocTypeExpression = 309,
        JSDocNameReference = 310,
        JSDocMemberName = 311,
        JSDocAllType = 312,
        JSDocUnknownType = 313,
        JSDocNullableType = 314,
        JSDocNonNullableType = 315,
        JSDocOptionalType = 316,
        JSDocFunctionType = 317,
        JSDocVariadicType = 318,
        JSDocNamepathType = 319, // https://jsdoc.app/about-namepaths.html
        JSDoc = 320,
        /** @deprecated Use SyntaxKind.JSDoc */
        JSDocComment = JSDoc,
        JSDocText = 321,
        JSDocTypeLiteral = 322,
        JSDocSignature = 323,
        JSDocLink = 324,
        JSDocLinkCode = 325,
        JSDocLinkPlain = 326,
        JSDocTag = 327,
        JSDocAugmentsTag = 328,
        JSDocImplementsTag = 329,
        JSDocAuthorTag = 330,
        JSDocDeprecatedTag = 331,
        JSDocClassTag = 332,
        JSDocPublicTag = 333,
        JSDocPrivateTag = 334,
        JSDocProtectedTag = 335,
        JSDocReadonlyTag = 336,
        JSDocOverrideTag = 337,
        JSDocCallbackTag = 338,
        JSDocEnumTag = 339,
        JSDocParameterTag = 340,
        JSDocReturnTag = 341,
        JSDocThisTag = 342,
        JSDocTypeTag = 343,
        JSDocTemplateTag = 344,
        JSDocTypedefTag = 345,
        JSDocSeeTag = 346,
        JSDocPropertyTag = 347,

        // Synthesized list
        SyntaxList = 348,

        // Transformation nodes
        NotEmittedStatement = 349,
        PartiallyEmittedExpression = 350,
        CommaListExpression = 351,
        MergeDeclarationMarker = 352,
        EndOfDeclarationMarker = 353,
        SyntheticReferenceExpression = 354,

        // Enum value count
        Count = 355,

        // Markers
        FirstAssignment = EqualsToken,
        LastAssignment = CaretEqualsToken,
        FirstCompoundAssignment = PlusEqualsToken,
        LastCompoundAssignment = CaretEqualsToken,
        FirstReservedWord = BreakKeyword,
        LastReservedWord = WithKeyword,
        FirstKeyword = BreakKeyword,
        LastKeyword = OfKeyword,
        FirstFutureReservedWord = ImplementsKeyword,
        LastFutureReservedWord = YieldKeyword,
        FirstTypeNode = TypePredicate,
        LastTypeNode = ImportType,
        FirstPunctuation = OpenBraceToken,
        LastPunctuation = CaretEqualsToken,
        FirstToken = Unknown,
        LastToken = LastKeyword,
        FirstTriviaToken = SingleLineCommentTrivia,
        LastTriviaToken = ConflictMarkerTrivia,
        FirstLiteralToken = NumericLiteral,
        LastLiteralToken = NoSubstitutionTemplateLiteral,
        FirstTemplateToken = NoSubstitutionTemplateLiteral,
        LastTemplateToken = TemplateTail,
        FirstBinaryOperator = LessThanToken,
        LastBinaryOperator = CaretEqualsToken,
        FirstStatement = VariableStatement,
        LastStatement = DebuggerStatement,
        FirstNode = QualifiedName,
        FirstJSDocNode = JSDocTypeExpression,
        LastJSDocNode = JSDocPropertyTag,
        FirstJSDocTagNode = JSDocTag,
        LastJSDocTagNode = JSDocPropertyTag,
    }
}
